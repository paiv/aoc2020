pico-8 cartridge // http://www.pico-8.com
version 29
__lua__
data = {{64511,65277,62971,63359,48831,65503,49152},{64511,49151,63485,63359,64895,61407,49152},{65534,65533,63452,65407,49087,61407,49152},{65406,65533,63485,65535,48831,65503,16384},{64510,65269,63485,65407,65023,63487,49152},{49150,65277,65535,65535,47039,61407,49152},{64510,65247,63485,65407,49151,32735,49152},{65535,61181,30717,65279,49151,65499,49152},{64510,65517,63469,65151,65471,61407,49152},{56255,65269,63487,65535,49151,61279,49152},{529,4160,14745,19744,49338,17280,49152},{64509,65273,63353,65407,65535,65535,49152},{64510,57343,65533,65535,49151,61401,16384},{64504,65533,63485,65407,31743,61407,49152},{64508,65275,30717,57215,65471,61407,49152},{64510,63231,62461,65407,63415,61407,49152},{64511,65279,47101,65407,49151,61403,49152},{46078,65215,65021,65535,65343,61439,49152},{16460,5136,42,52558,38912,14853,32768},{64510,65279,61439,57215,49087,65503,49152},{64510,65277,63229,65407,49151,65503,49152},{64510,65279,65535,65407,65471,60383,49152},{64446,65276,65535,63327,65471,63435,49152},{64510,65279,63485,65023,40895,61421,32768},{64510,65277,63477,48718,49055,59359,49152},{64447,65277,63485,63357,47039,28639,49152},{64510,65273,65525,65407,65471,61403,49152},{64511,65533,30701,65407,49087,61183,49152},{520,54408,18207,8322,16522,600,32768},{56831,65277,63487,65407,47039,60927,49152},{64510,65279,59388,65403,40959,61279,49152},{64510,65279,63485,65407,40895,32479,49152},{63935,65279,65527,65407,49087,63391,49152},{29058,38496,27137,16874,518,3850,49152},{64510,65277,63485,65407,47039,65503,49152},{64510,65275,65533,65535,49149,61439,49152},{62462,65533,65533,64831,40639,61407,49152},{65526,65269,65517,65407,49087,59359,49152},{65518,65405,63487,65403,49151,45055,49152},{20752,18422,6596,23714,41326,16996,16384},{65516,62205,65517,65535,49151,57855,49152},{65535,64509,63229,65407,49151,65503,49152},{64510,64509,59263,65406,48573,65439,49152},{63999,65533,65533,65534,65531,61439,49152},{64510,63485,63485,65403,65535,65503,32768},{64511,61180,63485,65407,48957,61407,49152},{64510,65277,63485,65407,49151,65503,49152},{65534,65277,55292,64319,49087,61407,49152},{38360,3482,9984,45254,33538,41636,32768},{64510,65275,63421,65535,15807,61407,49152},{57343,65503,63485,65407,49085,61399,49152},{64506,44669,65535,65535,49083,65527,49152},{50175,65535,63485,65535,32703,65503,49152},{48126,56061,65533,65535,40895,61407,49152},{65534,65532,63485,65407,65471,61407,49152},{65471,65535,59391,61311,40959,53195,49152},{64438,49150,65533,61439,16383,65503,49152},{12465,325,14405,8708,29970,50324,16384},{64496,65277,65503,65407,65533,53215,49152},{63997,65533,64383,61247,65215,65502,49152},{65534,65279,63485,65535,49087,61279,49152},{64510,48893,63485,65406,65531,59359,49152},{62463,65277,63357,65407,65471,61407,16384},{64511,65277,65534,65407,48127,61439,16384},{65535,65279,65469,65407,57151,61407,49152},{65535,65245,63485,61311,49087,61406,49152},{64510,65149,65277,65407,49087,60382,49152},{16736,10567,22986,4105,17442,51238,16384},{64510,65271,32765,65391,49087,32735,49152},{65534,57085,63229,65407,49147,61407,49152},{64462,65247,65535,32639,57279,61389,49152},{64511,65525,64255,61295,65471,65439,49152},{64252,64253,65535,65151,48959,65535,49152},{56317,64988,32765,65535,49149,45023,49152},{64510,65279,49151,63487,49087,28635,49152},{64510,65273,63359,57214,49087,28607,49152},{64446,65501,63487,57340,65535,65535,49152},{206,2616,32808,37280,33824,33838,0},{64487,65501,63485,64511,48895,61151,49152},{64511,65277,63485,65407,49087,65270,49152},{56317,63483,63485,65535,65439,65535,49152},{64511,65277,63423,32639,49087,65503,16384},{63998,65279,47101,65407,49087,61407,49152},{65534,64765,63483,32637,49087,65503,49152},{45152,27416,440,37640,4192,53972,0},{64511,32509,65533,60797,65471,65375,49152},{65278,65277,49149,65375,49151,61407,49152},{65534,57085,46973,65535,65471,65503,49152},{64510,64749,63487,57215,49087,65502,32768},{64510,65275,65533,65535,49087,61406,49152},{64510,32509,61405,63359,16382,65503,49152}}

function _init()
  part2 = false
  seats = {}
  prev = {}
  height = #data
  width = 0
  for y,row in ipairs(data) do
    seats[y] = {}
    prev[y] = {}
    for col,n in ipairs(row) do
      for i = 1,16 do
        local x = (col-1) * 16 + i
        width = x
        seats[y][x] = (n >> (16 - i)) & 1
      end
    end
  end
  state = {}
  state.ticks = 0
  state.seated = 0
  directions = {{-1, -1}, {0, -1}, {1, -1}, {-1, 0}, {1, 0}, {-1, 1}, {0, 1}, {1, 1}}
  cls(1)
end

function _update()
  -- state.ticks += 1
  -- if state.ticks < 10 then return end
  -- state.ticks = 0
  next = prev
  next_seated = 0
  for y,row in ipairs(seats) do
    for x,v in ipairs(row) do
      next[y][x] = v
      if v == 1 or v == 2 then
        local total = 0
        for _, dxy in ipairs(directions) do
          local dx = dxy[1]
          local dy = dxy[2]
          local ax = x + dx
          local ay = y + dy
          while (ay > 0) and (ax > 0) and (ay <= height) and (ax <= width) do
            local q = seats[ay][ax]
            if q == 1 then
              break
            elseif q == 2 then
              total += 1
              break
            end
            ax += dx
            ay += dy
            if not part2 then break end
          end
        end
        if v == 1 and total == 0 then
          next[y][x] = 2
          next_seated += 1
        elseif v == 2 and total >= 5 then
          next[y][x] = 1
        elseif v == 2 and total >= 4 and not part2 then
          next[y][x] = 1
        elseif v == 2 then
          next_seated += 1
        end
      end
    end
  end
  prev = seats
  seats = next
  state.seated = next_seated
end

function _draw()
  -- if state.ticks ~= 0 then return end
  cls(1)
  camera(-14, -4)
  for y,row in ipairs(seats) do
    for x,v in ipairs(row) do
      local c = 1
      if v == 1 then
        c = 6
      elseif v == 2 then
        c = 3
      end
      pset(x, y, c)
    end
  end
  camera()
  print('seated: '..state.seated, 14, 104, 6)
end
