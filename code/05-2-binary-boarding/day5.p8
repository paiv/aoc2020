pico-8 cartridge // http://www.pico-8.com
version 29
__lua__
-- aoc 2020 day 5
-- by paiv
data = {707,184,336,785,307,832,196,703,293,504,888,568,141,529,234,606,351,286,373,526,795,255,248,845,303,124,841,652,161,364,312,372,348,540,97,138,176,728,542,140,711,194,172,696,866,537,181,217,304,680,601,485,468,483,634,306,793,324,478,233,625,533,777,398,559,327,906,681,762,223,399,175,782,760,676,686,642,249,420,408,514,98,100,136,426,781,445,200,143,342,238,803,263,396,222,193,360,563,675,535,868,763,752,889,231,811,117,651,560,482,390,158,765,410,860,301,481,438,380,596,182,278,310,180,890,574,139,218,695,518,511,363,261,627,712,266,250,116,212,370,236,874,165,891,127,464,557,439,317,365,472,848,220,443,566,659,880,565,722,503,287,779,338,828,227,243,350,846,456,641,147,705,867,513,814,476,745,717,375,767,221,437,621,256,404,486,378,107,155,251,407,471,441,528,134,666,133,340,862,177,713,288,623,284,871,362,346,311,314,191,737,198,254,156,209,465,548,235,631,735,839,394,881,794,387,582,188,876,283,692,382,113,271,509,855,660,736,744,298,129,496,809,883,519,591,608,112,615,894,355,665,670,704,671,726,321,673,758,547,446,796,187,204,470,130,572,743,159,649,273,358,152,882,694,544,452,897,586,824,585,826,409,183,367,661,748,242,593,708,859,416,386,494,228,422,469,459,827,400,356,164,702,374,185,581,166,770,290,784,619,721,339,820,852,789,598,602,114,454,179,429,103,506,823,144,562,371,808,309,600,715,225,326,732,875,385,567,791,864,812,901,532,230,626,884,268,658,154,507,788,669,840,551,146,419,847,842,491,831,801,460,664,440,219,480,690,750,756,197,885,733,120,522,332,444,436,689,210,462,151,780,406,773,331,620,771,830,805,201,395,636,347,428,455,412,132,232,315,207,111,335,149,512,150,672,639,622,829,807,853,211,299,892,768,291,910,590,751,108,617,757,530,431,603,872,333,244,668,893,122,105,723,106,497,300,700,759,430,821,125,699,493,858,229,739,379,397,523,637,453,899,687,148,851,729,252,123,434,552,644,274,775,432,421,99,710,285,836,414,900,764,102,393,545,145,415,524,550,887,595,357,787,849,624,345,508,322,205,878,877,611,579,678,895,257,817,573,484,870,804,682,648,837,450,121,131,854,316,474,896,190,329,258,698,613,667,605,427,226,819,479,569,701,592,911,909,352,609,203,501,718,451,260,137,580,684,539,411,746,857,747,272,761,653,688,903,413,898,447,214,575,167,835,186,677,199,296,297,865,741,536,588,388,171,488,685,442,662,424,554,800,786,118,392,521,492,543,538,405,783,264,173,570,516,657,797,490,495,576,628,693,813,499,725,213,527,610,294,706,282,549,558,498,816,216,160,904,697,402,487,753,135,818,349,714,328,802,323,170,607,189,709,645,96,640,157,163,612,825,766,383,391,237,168,577,343,632,541,354,162,457,418,178,902,208,246,776,215,259,638,734,861,128,425,330,863,618,224,448,553,192,587,195,604,169,505,269,740,245,153,769,277,646,280,792,594,790,319,281,110,834,654,749,571,417,381,886,109,578,510,584,614,433,633,738,663,798,674,716,515,115,384,206,656,369,253,844,366,403,525,361,449,534,262,325,368,843,742,727,772,341,500,810,822,643,318,101,806,873,401,265,174,267,583,119,683,377,778,720,458,838,908,435,320,389,630,799,461,142,520,276,815,531,241,691,344,555,879,730,856,466,564,502,589,635,104,754,467,275,655,289,679,597,270,556,475,719,647,599,202,755,313,353,279,376,731,650,616,305,833,774,359,546,337,517,247,850,463,295,489,905,302,477,308,907,561,292,240,239,869,473,423,724,126,334}

function _init()
  state = {}
  state.ticks = 0
  state.seated = 0
  state.lanes = {0,3, 8,11,14,17, 22,25}
  state.obj_index = 0
  state.stage1_offset = 0
  stage1 = {}
  stage2 = {}
  stage3 = {}
  stage4 = {}
  cls(1)
  map(0, 0, 0, 0)

  camera(-80, -9)
  for row = 0,107 do
    for col = 0,7 do
      local c = 5
      local x = state.lanes[col+1]
      pset(x, row, c)
      pset(x+1, row, c)
    end
  end
  camera()
end

function seatcode(n)
  local row = n // 8
  local col = n % 8
  local abc = {'f', 'b'}
  local s = ''
  for i = 0,7 do
    local j = ((row >> (7 - i)) & 1) + 1
    s = s .. abc[j]
  end
  local abc = {'l', 'r'}
  for i = 0,2 do
    local j = ((col >> (2 - i)) & 1) + 1
    s = s .. abc[j]
  end
  return s
end

function _update()
  local drop1 = false
  for i = #stage3,1,-1 do
    local obj = stage3[i]
    obj[2] += 1
    if obj[2] > obj[5] then
      local obj = deli(stage3, i)
      obj[2] = obj[5]
      add(stage4, obj)
    end
  end

  local drop1 = false
  for obj in all(stage2) do
    obj[1] += 1
    drop1 = drop1 or (obj[1] > obj[5])
  end
  if drop1 then
    local obj = deli(stage2, 1)
    local dy = obj[1] - obj[5]
    obj[1] = obj[5]
    obj[5] = (obj[4] >> 3)
    add(stage3, obj)
  end

  state.stage1_offset = (state.stage1_offset + 1) % 8
  if (state.stage1_offset == 0) then
    local drop1 = false
    for obj in all(stage1) do
      obj[2] -= 8
      drop1 = drop1 or (obj[2] < obj[5])
    end
    if drop1 then
      local obj = deli(stage1, 1)
      obj[2] = 9
      obj[5] = 36 + 14 * ((obj[4] >> 2) & 1)
      add(stage2, obj)
    end
    if (state.obj_index < #data) then
      state.obj_index += 1
      local oid = data[state.obj_index]
      local sid = seatcode(oid)
      add(stage1, {0, 127, sid, oid, 10})
    end
  end
end

function _draw()
  camera(-4, 0)
  rectfill(0, 14, 42, 128, 1)
  for obj in all(stage1) do
    local y = obj[2] - state.stage1_offset
    print(obj[3], 0, y, 6)
  end
  rectfill(0, 8, 42, 13, 1)

  camera(-50, -9)
  line(0, 0, 70, 0, 1)
  line(36, 0, 36, 120, 1)
  line(50, 0, 50, 120, 1)
  camera(-50, 0)
  for obj in all(stage2) do
    pset(obj[1], obj[2], 6)
  end
  for obj in all(stage3) do
    pset(obj[1], obj[2], 6)
  end

  camera(-80, 0)
  for obj in all(stage4) do
    local y = obj[2]
    local col = obj[4] % 8
    local x = state.lanes[col+1]
    line(x, y, x+1, y, 9)
  end
  stage4 = {}

  camera()
end
